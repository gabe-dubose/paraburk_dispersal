#get the predicted values and their standard errors
predictions <- predict(model, model.data, type = "response", se.fit = TRUE)
model.data$fit <- predictions$fit
model.data$se <- predictions$se.fit
model.data$lower <- predictions$fit - 1.96 * predictions$se.fit
model.data$upper <- predictions$fit + 1.96 * predictions$se.fit
write.csv(model.data, '../data/agricolaris_fitness_effect_dicty_phylo_model.csv')
#fit model
model <- lm(log_spore_norm_kp~distance_from_discoideum, data)
summary(model)
source("~/Desktop/projects/paraburk_host_range/scripts/agricolaris_fitness_model.R")
coef(model)
coef(model)
confint(model)
source("~/Desktop/projects/paraburk_host_range/scripts/agricolaris_fitness_model.R")
#load data
data = read.csv('../data/paraburk_intrahost_data.csv')
data <- na.omit(data)
#keep only confident entries
data <- data[data$confident == 1,]
#get agricolaris data only
data <- data[data$infect == 'B859', ]
#remove Cavanderia, as it it too distant
data <- data[data$taxonomy != 'Cavenderia_aureostipes', ]
#take log of normalized spore count
data$log_spore_norm_kp <- log(data$spore_norm_kp)
#fit model
model <- lm(log_spore_norm_kp~distance_from_discoideum, data)
summary(model)
confint(model)
coef(model)
plot(data$distance_from_discoideum, data$log_spore_norm_kp)
abline(model)
#assess model
predicted.proportions <- predict(model, type = "response")
# Residuals from the model
residuals <- residuals(model, type = "deviance")
# Plot residuals vs. fitted values
plot(predicted.proportions, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
# Q-Q plot of the residuals
qqnorm(residuals, main = "Q-Q Plot of Residuals")
qqline(residuals, col = "red", lwd = 2)
shapiro.test(residuals)
#get model predictions and write out
model.data <- data.frame(distance_from_discoideum = seq(min(data$distance_from_discoideum),
max(data$distance_from_discoideum),
length.out = 100))
#get the predicted values and their standard errors
predictions <- predict(model, model.data, type = "response", se.fit = TRUE)
model.data$fit <- predictions$fit
model.data$se <- predictions$se.fit
model.data$lower <- predictions$fit - 1.96 * predictions$se.fit
model.data$upper <- predictions$fit + 1.96 * predictions$se.fit
write.csv(model.data, '../data/bonniea_fitness_effect_dicty_phylo_model.csv')
#load data
data = read.csv('../data/paraburk_intrahost_data.csv')
data <- na.omit(data)
#keep only confident entries
data <- data[data$confident == 1,]
#get agricolaris data only
data <- data[data$infect == 'B859', ]
#remove Cavanderia, as it it too distant
data <- data[data$taxonomy != 'Cavenderia_aureostipes', ]
#take log of normalized spore count
data$log_spore_norm_kp <- log(data$spore_norm_kp)
#fit model
model <- lm(log_spore_norm_kp~distance_from_discoideum, data)
summary(model)
coef(model)
confint(model)
#load data
data = read.csv('../data/paraburk_intrahost_data.csv')
data <- na.omit(data)
#keep only confident entries
data <- data[data$confident == 1,]
#get agricolaris data only
data <- data[data$infect == 'B11', ]
#remove Cavanderia, as it it too distant
data <- data[data$taxonomy != 'Cavenderia_aureostipes', ]
#take log of normalized spore count
data$log_spore_norm_kp <- log(data$spore_norm_kp)
#fit model
model <- lm(log_spore_norm_kp~distance_from_discoideum, data)
summary(model)
confint(model)
coef(model)
plot(data$distance_from_discoideum, data$log_spore_norm_kp)
abline(model)
#assess model
predicted.proportions <- predict(model, type = "response")
# Residuals from the model
residuals <- residuals(model, type = "deviance")
# Plot residuals vs. fitted values
plot(predicted.proportions, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
# Q-Q plot of the residuals
qqnorm(residuals, main = "Q-Q Plot of Residuals")
qqline(residuals, col = "red", lwd = 2)
shapiro.test(residuals)
#get model predictions and write out
model.data <- data.frame(distance_from_discoideum = seq(min(data$distance_from_discoideum),
max(data$distance_from_discoideum),
length.out = 100))
#get the predicted values and their standard errors
predictions <- predict(model, model.data, type = "response", se.fit = TRUE)
model.data$fit <- predictions$fit
model.data$se <- predictions$se.fit
model.data$lower <- predictions$fit - 1.96 * predictions$se.fit
model.data$upper <- predictions$fit + 1.96 * predictions$se.fit
write.csv(model.data, '../data/hayleyella_fitness_effect_dicty_phylo_model.csv')
#load data
data = read.csv('../data/paraburk_intrahost_data.csv')
data <- na.omit(data)
#keep only confident entries
data <- data[data$confident == 1,]
#get agricolaris data only
data <- data[data$infect == 'B859', ]
#remove Cavanderia, as it it too distant
data <- data[data$taxonomy != 'Cavenderia_aureostipes', ]
#take log of normalized spore count
data$log_spore_norm_kp <- log(data$spore_norm_kp)
#fit model
model <- lm(log_spore_norm_kp~distance_from_discoideum, data)
summary(model)
confint(model)
coef(model)
plot(data$distance_from_discoideum, data$log_spore_norm_kp)
abline(model)
#assess model
predicted.proportions <- predict(model, type = "response")
# Residuals from the model
residuals <- residuals(model, type = "deviance")
# Plot residuals vs. fitted values
plot(predicted.proportions, residuals,
xlab = "Fitted Values", ylab = "Residuals",
main = "Residuals vs. Fitted Values")
abline(h = 0, col = "red", lwd = 2)
# Q-Q plot of the residuals
qqnorm(residuals, main = "Q-Q Plot of Residuals")
qqline(residuals, col = "red", lwd = 2)
shapiro.test(residuals)
source("~/Desktop/projects/paraburk_host_range/scripts/agricolaris_fitness_model.R")
?glm
?lm
library(ggtree)
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
p <- ggtree(tree) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
theme_tree()
print(P)
print(p)
View(tree)
ggtree(tree) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
theme_tree()
ggtree(tree, layout = 'circular') +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
theme_tree()
ggtree(tree, layout = 'circular') +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
theme_tree()
# get genus names
genus <- sapply(strsplit(tree$tip.label, " "), `[`, 1)
genus
genus.df <- data.frame(tip.label = tree$tip.label, genus = genus)
View(genus.df)
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +  # Color tip points by genus
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
scale_color_manual(values = rainbow(length(unique(genus)))) +  # Assign colors
theme_tree()
library(dplyr)
ggtree(tree, layout = "circular") %<+% genus_df +
geom_tippoint(aes(color = genus), size = 2) +  # Color tip points by genus
geom_tiplab(aes(label = paste0("italic('", label, "')"), color = genus),
parse = TRUE,
size = 3) +  # Color tip labels by genus
scale_color_manual(values = rainbow(length(unique(genus)))) +  # Assign colors
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +  # Color tip points by genus
geom_tiplab(aes(label = paste0("italic('", label, "')"), color = genus),
parse = TRUE,
size = 3) +  # Color tip labels by genus
scale_color_manual(values = rainbow(length(unique(genus)))) +  # Assign colors
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +  # Color tip points by genus
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
scale_color_manual(values = rainbow(length(unique(genus)))) +  # Assign colors
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
scale_color_manual(values = rainbow(length(unique(genus)))) +
geom_treescale(x = 0, y = -1, width = 0.1) +
theme_tree()
# define color map
burk.colormap <- c(
achromobacter = rgb(0.193374, 0.018354, 0.59033),
pandoraea = rgb(0.299855, 0.009561, 0.631624),
cupriavidus = rgb(0.399411, 0.000859, 0.656133),
mycoavidus = rgb(0.494877, 0.01199, 0.657865),
herbaspirillum = rgb(0.584391, 0.068579, 0.632812),
mitsuaria = rgb(0.665129, 0.138566, 0.585582),
acidovorax = rgb(0.736019, 0.209439, 0.527908),
caballerionia = rgb(0.798216, 0.280197, 0.469538),
burkholderia = rgb(0.853319, 0.351553, 0.413734),
paraburkholderia = rgb(0.901807, 0.425087, 0.359688),
variovorax = rgb(0.942598, 0.502639, 0.305816),
caballeronia = rgb(0.973416, 0.585761, 0.25154),
collimonas = rgb(0.991365, 0.675355, 0.198453),
massilia = rgb(0.993033, 0.77172, 0.154808),
bordetella = rgb(0.974443, 0.874622, 0.144061)
)
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
scale_color_manual(values = burk.colormap) +
theme_tree()
View(genus.df)
View(genus.df)
# define color map
burk.colormap <- c(
Achromobacter = rgb(0.193374, 0.018354, 0.59033),
Pandoraea = rgb(0.299855, 0.009561, 0.631624),
Cupriavidus = rgb(0.399411, 0.000859, 0.656133),
Mycoavidus = rgb(0.494877, 0.01199, 0.657865),
Herbaspirillum = rgb(0.584391, 0.068579, 0.632812),
Mitsuaria = rgb(0.665129, 0.138566, 0.585582),
Acidovorax = rgb(0.736019, 0.209439, 0.527908),
Caballerionia = rgb(0.798216, 0.280197, 0.469538),
Burkholderia = rgb(0.853319, 0.351553, 0.413734),
Paraburkholderia = rgb(0.901807, 0.425087, 0.359688),
Variovorax = rgb(0.942598, 0.502639, 0.305816),
Caballeronia = rgb(0.973416, 0.585761, 0.25154),
Collimonas = rgb(0.991365, 0.675355, 0.198453),
Massilia = rgb(0.993033, 0.77172, 0.154808),
Bordetella = rgb(0.974443, 0.874622, 0.144061)
)
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3) +
scale_color_manual(values = burk.colormap) +
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.5) +
scale_color_manual(values = burk.colormap) +
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.1) +
scale_color_manual(values = burk.colormap) +
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.05) +
scale_color_manual(values = burk.colormap) +
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.025) +
scale_color_manual(values = burk.colormap) +
theme_tree()
ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.025) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/burkholderiales_tree.pdf", plot = p, device = "pdf", width = 10, height = 10)
p <- ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.025) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/burkholderiales_tree.pdf", plot = p, device = "pdf", width = 10, height = 10)
ggsave("../figures/burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8)
ggsave("../figures/burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8.1)
p <- ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.015) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8.1)
ggsave("../figures/parts/total_burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8.1)
library(ggtree)
library(ape)
library(dplyr)
# load tree
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
# get genus names
genus <- sapply(strsplit(tree$tip.label, " "), `[`, 1)
genus.df <- data.frame(tip.label = tree$tip.label, genus = genus)
# define color map
burk.colormap <- c(
Achromobacter = rgb(0.193374, 0.018354, 0.59033),
Pandoraea = rgb(0.299855, 0.009561, 0.631624),
Cupriavidus = rgb(0.399411, 0.000859, 0.656133),
Mycoavidus = rgb(0.494877, 0.01199, 0.657865),
Herbaspirillum = rgb(0.584391, 0.068579, 0.632812),
Mitsuaria = rgb(0.665129, 0.138566, 0.585582),
Acidovorax = rgb(0.736019, 0.209439, 0.527908),
Caballerionia = rgb(0.798216, 0.280197, 0.469538),
Burkholderia = rgb(0.853319, 0.351553, 0.413734),
Paraburkholderia = rgb(0.901807, 0.425087, 0.359688),
Variovorax = rgb(0.942598, 0.502639, 0.305816),
Caballeronia = rgb(0.973416, 0.585761, 0.25154),
Collimonas = rgb(0.991365, 0.675355, 0.198453),
Massilia = rgb(0.993033, 0.77172, 0.154808),
Bordetella = rgb(0.974443, 0.874622, 0.144061)
)
p <- ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.015) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/parts/total_burkholderiales_tree.png", plot = p, device = "png", width = 8, height = 8.1, dpi=600)
library(ggtree)
library(ape)
library(dplyr)
# load tree
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
# get genus names
genus <- sapply(strsplit(tree$tip.label, " "), `[`, 1)
genus.df <- data.frame(tip.label = tree$tip.label, genus = genus)
# define color map
burk.colormap <- c(
Massilia = rgb(0.193374, 0.018354, 0.59033),
Burkholderia = rgb(0.299855, 0.009561, 0.631624),
Collimonas = rgb(0.399411, 0.000859, 0.656133),
Mycoavidus = rgb(0.494877, 0.01199, 0.657865),
Caballerionia = rgb(0.584391, 0.068579, 0.632812),
Mitsuaria = rgb(0.665129, 0.138566, 0.585582),
Caballeronia = rgb(0.736019, 0.209439, 0.527908),
Bordetella = rgb(0.798216, 0.280197, 0.469538),
Cupriavidus = rgb(0.853319, 0.351553, 0.413734),
Achromobacter = rgb(0.901807, 0.425087, 0.359688),
Herbaspirillum = rgb(0.942598, 0.502639, 0.305816),
Variovorax = rgb(0.973416, 0.585761, 0.25154),
Paraburkholderia = rgb(0.991365, 0.675355, 0.198453),
Acidovorax = rgb(0.993033, 0.77172, 0.154808),
Pandoraea = rgb(0.974443, 0.874622, 0.144061)
)
p <- ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.015) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/parts/total_burkholderiales_tree.png", plot = p, device = "png", width = 8, height = 8.1, dpi=600)
ggsave("../figures/parts/total_burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8.1)
# load tree
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
# get genus names
genus <- sapply(strsplit(tree$tip.label, " "), `[`, 1)
genus.df <- data.frame(tip.label = tree$tip.label, genus = genus)
# define color map
burk.colormap <- c(
Massilia = rgb(0.193374, 0.018354, 0.59033),
Burkholderia = rgb(0.299855, 0.009561, 0.631624),
Collimonas = rgb(0.399411, 0.000859, 0.656133),
Mycoavidus = rgb(0.494877, 0.01199, 0.657865),
Caballerionia = rgb(0.584391, 0.068579, 0.632812),
Mitsuaria = rgb(0.665129, 0.138566, 0.585582),
Caballeronia = rgb(0.736019, 0.209439, 0.527908),
Bordetella = rgb(0.798216, 0.280197, 0.469538),
Cupriavidus = rgb(0.853319, 0.351553, 0.413734),
Achromobacter = rgb(0.901807, 0.425087, 0.359688),
Herbaspirillum = rgb(0.942598, 0.502639, 0.305816),
Variovorax = rgb(0.973416, 0.585761, 0.25154),
Paraburkholderia = rgb(0.991365, 0.675355, 0.198453),
Acidovorax = rgb(0.993033, 0.77172, 0.154808),
Pandoraea = rgb(0.974443, 0.874622, 0.144061)
)
p <- ggtree(tree, layout = "circular") %<+% genus.df +
geom_tippoint(aes(color = genus), size = 2) +
geom_tiplab(aes(label = paste0("italic('", label, "')")),
parse = TRUE,
size = 3,
offset = 0.015) +
scale_color_manual(values = burk.colormap) +
theme_tree() +
theme(legend.position = "none")
ggsave("../figures/parts/total_burkholderiales_tree.pdf", plot = p, device = "pdf", width = 8, height = 8.1)
ggsave("../figures/parts/total_burkholderiales_tree.png", plot = p, device = "png", width = 8, height = 8.1, dpi=600)
library(ggtree)
library(ape)
library(dplyr)
# load tree
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
tree$tip.label
length(tree$tip.label)
library(ggtree)
library(ape)
library(dplyr)
# load tree
tree.file <- '../data/processed_burkholderiales_tree.txt'
tree <- read.tree(tree.file)
# format leaf labels
tree$tip.label <- gsub("_", " ", tree$tip.label)
# get genus names
genus <- sapply(strsplit(tree$tip.label, " "), `[`, 1)
genus.df <- data.frame(tip.label = tree$tip.label, genus = genus)
library(ape)
library(vegan)
library(geosphere)
# Load data
prevalence.data <- read.csv('../data/P_agricolaris_haplotype_data.csv')
agricolaris.phylogeny <- ape::read.tree("../data/P_agricolaris_haplotype_tree.nwk")
# Compute phylogenetic distance matrix
agricolaris.phy.dist.mat <- ape::cophenetic.phylo(agricolaris.phylogeny)
# Compute geographical distance matrix
coords <- as.matrix(prevalence.data[, c("longitude", "latitude")])
geo.dist.matrix <- distm(coords, fun = distHaversine)
rownames(geo.dist.matrix) <- prevalence.data$sample.id
colnames(geo.dist.matrix) <- prevalence.data$sample.id
# create geographic distances to haplotype level
haplotypes <- unique(prevalence.data$lepA_haplotype)
n <- length(haplotypes)
geo.dist.haplo <- matrix(0, n, n)
rownames(geo.dist.haplo) <- colnames(geo.dist.haplo) <- haplotypes
for (i in 1:n) {
for (j in 1:n) {
samples.i <- prevalence.data$sample.id[prevalence.data$lepA_haplotype == haplotypes[i]]
samples.j <- prevalence.data$sample.id[prevalence.data$lepA_haplotype == haplotypes[j]]
if (length(samples.i) > 0 && length(samples.j) > 0) {
#take the average geographical distance between each haplotype
geo.dist.haplo[i, j] <- mean(geo.dist.matrix[samples.i, samples.j], na.rm = TRUE)
}
}
}
# Create a matrix of host associations at haplotype level
host.matrix <- model.matrix(~ dicty.species.id - 1, data = prevalence.data)
prevalence.data$lepA_haplotype <- as.factor(prevalence.data$lepA_haplotype)
host.agg <- aggregate(host.matrix, by = list(prevalence.data$lepA_haplotype), FUN = mean)
host.matrix <- as.matrix(host.agg[, -1])
rownames(host.matrix) <- host.agg[, 1]
# make all matrices align
haplotype.matrix <- agricolaris.phy.dist.mat
haplotype.matrix <- haplotype.matrix[rownames(haplotype.matrix) %in% rownames(geo.dist.haplo), colnames(haplotype.matrix) %in% colnames(geo.dist.haplo)]
View(haplotype.matrix)
View(host.matrix)
